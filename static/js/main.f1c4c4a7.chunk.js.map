{"version":3,"sources":["component/dbs-logo.tsx","lib/colors.ts","component/app.tsx","serviceWorker.ts","index.tsx"],"names":["DbsLogo","dColor","bColor","bgColor","border","xmlns","viewBox","width","height","id","fill","d","stroke","strokeWidth","strokeMiterlimit","colors","App","React","useState","b","background","props","setProps","useEffect","interval","setInterval","Math","floor","random","length","clearInterval","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kKA+BeA,EAtByB,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAQC,EAAV,EAAUA,OAAQC,EAAlB,EAAkBA,QAASC,EAA3B,EAA2BA,OAA3B,OACjC,yBAAKC,MAAM,6BAA6BC,QAAQ,cAAcC,MAAM,OAAOC,OAAO,QAC9E,uBAAGC,GAAG,cACF,0BAAMC,KAAMP,EACNQ,EAAE,qMAGZ,uBAAGF,GAAG,KACF,0BACIE,EAAE,4SACFD,KAAMR,EAAQU,OAAQR,EAAQS,YAAa,EAAGC,iBAAkB,KACpE,0BAAMH,EAAE,mEAAmED,KAAMN,KAErF,uBAAGK,GAAG,KACF,0BACIE,EAAE,0VACFD,KAAMT,EAAQW,OAAQR,EAAQS,YAAa,EAAGC,iBAAkB,KACpE,0BAAMH,EAAE,wCAAwCD,KAAMN,OC1BxDW,EAAS,CAClB,YACA,eACA,OACA,aACA,QACA,QACA,SACA,QACA,iBACA,OACA,aACA,QACA,YACA,YACA,aACA,YACA,QACA,iBACA,WACA,UACA,OACA,WACA,WACA,gBACA,WACA,WACA,YACA,YACA,cACA,iBACA,aACA,aACA,UACA,aACA,eACA,gBACA,gBACA,gBACA,gBACA,aACA,WACA,cACA,UACA,UACA,aACA,YACA,cACA,cACA,UACA,YACA,aACA,OACA,YACA,OACA,OACA,QACA,cACA,WACA,UACA,YACA,SACA,QACA,QACA,WACA,gBACA,YACA,eACA,YACA,aACA,YACA,uBACA,YACA,YACA,aACA,YACA,cACA,gBACA,eACA,iBACA,iBACA,iBACA,cACA,OACA,YACA,QACA,UACA,SACA,mBACA,aACA,eACA,eACA,iBACA,kBACA,oBACA,kBACA,kBACA,eACA,YACA,YACA,WACA,cACA,OACA,UACA,QACA,YACA,SACA,YACA,SACA,gBACA,YACA,gBACA,gBACA,aACA,YACA,OACA,OACA,OACA,aACA,SACA,gBACA,MACA,YACA,YACA,cACA,SACA,aACA,WACA,WACA,SACA,SACA,UACA,YACA,YACA,YACA,OACA,cACA,YACA,MACA,OACA,UACA,SACA,YACA,SACA,QACA,QACA,aACA,SACA,eClHWC,EA7BH,WAAO,IAAD,EACYC,IAAMC,SAAS,CACrCP,EAAGI,EAAO,GACVI,EAAGJ,EAAO,GACVK,WAAYL,EAAO,GACnBX,OAAQW,EAAO,KALL,mBACPM,EADO,KACAC,EADA,KAwBd,OAhBAL,IAAMM,WAAU,WACZ,IAAMC,EAAWC,aAAY,WACzBH,EAAS,CACLX,EAAGI,EAAOW,KAAKC,MAAMD,KAAKE,SAAWb,EAAOc,SAC5CV,EAAGJ,EAAOW,KAAKC,MAAMD,KAAKE,SAAWb,EAAOc,SAC5CT,WAAYL,EAAOW,KAAKC,MAAMD,KAAKE,SAAWb,EAAOc,SACrDzB,OAAQW,EAAOW,KAAKC,MAAMD,KAAKE,SAAWb,EAAOc,aAEtD,KAEH,OAAO,WACHC,cAAcN,MAEnB,IAIC,kBAAC,EAAD,CAASvB,OAAQoB,EAAMV,EAAGT,OAAQmB,EAAMF,EAAGhB,QAASkB,EAAMD,WAAYhB,OAAQiB,EAAMjB,UClBxE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f1c4c4a7.chunk.js","sourcesContent":["import React from 'react'\n\ninterface DbsLogoProps {\n    dColor: string;\n    bColor: string;\n    bgColor: string;\n    border: string;\n}\n\nconst DbsLogo: React.FC<DbsLogoProps> = ({dColor, bColor, bgColor, border}) => (\n       <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 600 600\" width=\"100%\" height=\"100%\">\n           <g id=\"background\">\n               <path fill={bgColor}\n                     d=\"M500.839 23.577H99.16c-41.744 0-75.585 33.84-75.585 75.585v401.677c0 41.744 33.841 75.585 75.585 75.585H500.84c41.744 0 75.585-33.841 75.585-75.585V99.162c0-41.745-33.841-75.585-75.585-75.585\"\n               />\n           </g>\n           <g id=\"B\">\n               <path\n                   d=\"M260.958 79.531h182.958c61.307 0 76.449 38.46 76.213 74.338-.108 16.383.243 114.207.243 114.207-2.577 9.414-17.22 30.077-36.355 31.035l.246.305c.53.657 1.219.824 1.915.851 2.778.108 29.567 20.2 34.194 30.19l.027 154.066c-4.631 14.704-20.186 32.694-36.672 33.9-15.604 1.14-21.33 0-39.811 0H260.958z\"\n                   fill={bColor} stroke={border} strokeWidth={8} strokeMiterlimit={10}/>\n               <path d=\"M388.1 336.682h-6.63v77.099h6.63zM388.1 186.1h-6.63v77.099h6.63z\" fill={border}/>\n           </g>\n           <g id=\"D\">\n               <path\n                   d=\"M82.601 520.469h111.647c30.536 0 55.898-6.161 76.102-18.484 20.195-12.322 36.336-28.755 48.428-49.29 12.085-20.542 20.591-43.954 25.526-70.235 4.928-26.291 7.396-53.4 7.396-81.327 0-31.22-3.102-60.283-9.304-87.181-6.203-26.906-15.827-50.212-28.866-69.93-13.047-19.714-29.508-35.223-49.383-46.516-19.883-11.301-43.5-16.943-70.853-16.943H82.601z\"\n                   fill={dColor} stroke={border} strokeWidth={8} strokeMiterlimit={10}/>\n               <path d=\"M207.569 224.65h-7.143v149.947h7.143z\" fill={border}/>\n           </g>\n       </svg>\n)\n\nexport default DbsLogo\n","export const colors = [\n    \"AliceBlue\",\n    \"AntiqueWhite\",\n    \"Aqua\",\n    \"Aquamarine\",\n    \"Azure\",\n    \"Beige\",\n    \"Bisque\",\n    \"Black\",\n    \"BlanchedAlmond\",\n    \"Blue\",\n    \"BlueViolet\",\n    \"Brown\",\n    \"BurlyWood\",\n    \"CadetBlue\",\n    \"Chartreuse\",\n    \"Chocolate\",\n    \"Coral\",\n    \"CornflowerBlue\",\n    \"Cornsilk\",\n    \"Crimson\",\n    \"Cyan\",\n    \"DarkBlue\",\n    \"DarkCyan\",\n    \"DarkGoldenRod\",\n    \"DarkGray\",\n    \"DarkGrey\",\n    \"DarkGreen\",\n    \"DarkKhaki\",\n    \"DarkMagenta\",\n    \"DarkOliveGreen\",\n    \"DarkOrange\",\n    \"DarkOrchid\",\n    \"DarkRed\",\n    \"DarkSalmon\",\n    \"DarkSeaGreen\",\n    \"DarkSlateBlue\",\n    \"DarkSlateGray\",\n    \"DarkSlateGrey\",\n    \"DarkTurquoise\",\n    \"DarkViolet\",\n    \"DeepPink\",\n    \"DeepSkyBlue\",\n    \"DimGray\",\n    \"DimGrey\",\n    \"DodgerBlue\",\n    \"FireBrick\",\n    \"FloralWhite\",\n    \"ForestGreen\",\n    \"Fuchsia\",\n    \"Gainsboro\",\n    \"GhostWhite\",\n    \"Gold\",\n    \"GoldenRod\",\n    \"Gray\",\n    \"Grey\",\n    \"Green\",\n    \"GreenYellow\",\n    \"HoneyDew\",\n    \"HotPink\",\n    \"IndianRed\",\n    \"Indigo\",\n    \"Ivory\",\n    \"Khaki\",\n    \"Lavender\",\n    \"LavenderBlush\",\n    \"LawnGreen\",\n    \"LemonChiffon\",\n    \"LightBlue\",\n    \"LightCoral\",\n    \"LightCyan\",\n    \"LightGoldenRodYellow\",\n    \"LightGray\",\n    \"LightGrey\",\n    \"LightGreen\",\n    \"LightPink\",\n    \"LightSalmon\",\n    \"LightSeaGreen\",\n    \"LightSkyBlue\",\n    \"LightSlateGray\",\n    \"LightSlateGrey\",\n    \"LightSteelBlue\",\n    \"LightYellow\",\n    \"Lime\",\n    \"LimeGreen\",\n    \"Linen\",\n    \"Magenta\",\n    \"Maroon\",\n    \"MediumAquaMarine\",\n    \"MediumBlue\",\n    \"MediumOrchid\",\n    \"MediumPurple\",\n    \"MediumSeaGreen\",\n    \"MediumSlateBlue\",\n    \"MediumSpringGreen\",\n    \"MediumTurquoise\",\n    \"MediumVioletRed\",\n    \"MidnightBlue\",\n    \"MintCream\",\n    \"MistyRose\",\n    \"Moccasin\",\n    \"NavajoWhite\",\n    \"Navy\",\n    \"OldLace\",\n    \"Olive\",\n    \"OliveDrab\",\n    \"Orange\",\n    \"OrangeRed\",\n    \"Orchid\",\n    \"PaleGoldenRod\",\n    \"PaleGreen\",\n    \"PaleTurquoise\",\n    \"PaleVioletRed\",\n    \"PapayaWhip\",\n    \"PeachPuff\",\n    \"Peru\",\n    \"Pink\",\n    \"Plum\",\n    \"PowderBlue\",\n    \"Purple\",\n    \"RebeccaPurple\",\n    \"Red\",\n    \"RosyBrown\",\n    \"RoyalBlue\",\n    \"SaddleBrown\",\n    \"Salmon\",\n    \"SandyBrown\",\n    \"SeaGreen\",\n    \"SeaShell\",\n    \"Sienna\",\n    \"Silver\",\n    \"SkyBlue\",\n    \"SlateBlue\",\n    \"SlateGray\",\n    \"SlateGrey\",\n    \"Snow\",\n    \"SpringGreen\",\n    \"SteelBlue\",\n    \"Tan\",\n    \"Teal\",\n    \"Thistle\",\n    \"Tomato\",\n    \"Turquoise\",\n    \"Violet\",\n    \"Wheat\",\n    \"White\",\n    \"WhiteSmoke\",\n    \"Yellow\",\n    \"YellowGreen\",\n];\n","import React from 'react';\nimport DbsLogo from \"./dbs-logo\";\nimport {colors} from \"../lib/colors\";\n\n\nconst App = () => {\n    const [props, setProps] = React.useState({\n        d: colors[0],\n        b: colors[1],\n        background: colors[3],\n        border: colors[0]\n    })\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setProps({\n                d: colors[Math.floor(Math.random() * colors.length)],\n                b: colors[Math.floor(Math.random() * colors.length)],\n                background: colors[Math.floor(Math.random() * colors.length)],\n                border: colors[Math.floor(Math.random() * colors.length)]\n            })\n        }, 1000)\n\n        return () => {\n            clearInterval(interval)\n        }\n    }, [])\n\n\n    return (\n        <DbsLogo dColor={props.d} bColor={props.b} bgColor={props.background} border={props.border}/>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './component/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}